<?php

// phpcs:disable

namespace Drupal\Tests\musica\Unit\ValinorD;

use CuyZ\Valinor\MapperBuilder;
use CuyZ\Valinor\Mapper\Source\Source;
use PHPUnit\Framework\TestCase;

/**
 * Tests hydrating Spotify DTOs generated by API platform using Valinor.
 *
 * Note: test is successful ater correcting some types on the Artist class.
 *
 * @group musica
 */
class HydrateSpotifyTest extends TestCase {

  public function testSpotifyHydrate() {

    // From OpenAPI/Swagger:
    //  curl -X 'GET' \
    //  'https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg' \
    //  -H 'accept: application/json' \
    //  -H 'Authorization: Bearer XZYabc123

    $sauce = <<<JSON
    {
      "external_urls": {
        "spotify": "https://open.spotify.com/artist/0TnOYISbd1XYRBk9myaseg"
      },
      "followers": {
        "href": null,
        "total": 10340479
      },
      "genres": [
        "dance pop",
        "miami hip hop",
        "pop"
      ],
      "href": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg",
      "id": "0TnOYISbd1XYRBk9myaseg",
      "images": [
        {
          "height": 640,
          "url": "https://i.scdn.co/image/ab6761610000e5ebee07b5820dd91d15d397e29c",
          "width": 640
        },
        {
          "height": 320,
          "url": "https://i.scdn.co/image/ab67616100005174ee07b5820dd91d15d397e29c",
          "width": 320
        },
        {
          "height": 160,
          "url": "https://i.scdn.co/image/ab6761610000f178ee07b5820dd91d15d397e29c",
          "width": 160
        }
      ],
      "name": "Pitbull",
      "popularity": 80,
      "type": "artist",
      "uri": "spotify:artist:0TnOYISbd1XYRBk9myaseg"
    }
    JSON;

    $response = Source::json($sauce);

    try {

      $signature = GenericValueContainer::class . '<Drupal\musica\API\Spotify\Entity\Artist>';

      $dto = (new MapperBuilder())
        // ->allowSuperfluousKeys()
        ->allowPermissiveTypes()
        // ->enableFlexibleCasting()
        ->mapper()
        ->map($signature, $response);

      $this->assertSame(TRUE, TRUE);
    }
    catch (\Exception $error) {
      $this->markTestIncomplete($error->getMessage());
    }

  }

}

/**
 * @template T
 */
final class GenericValueContainer
{
  public function __construct(
      /** @var T */
      public readonly mixed $container,
  ) {}
}
